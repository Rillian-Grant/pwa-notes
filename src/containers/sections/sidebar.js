// The sidebar

import React from "react";

import Nav from "react-bootstrap/Nav";
import Form from "react-bootstrap/Form";

import storage from "../../storage";

class Sidebar extends React.Component {
    // Create an array of Nav.Link JSX objects (the list) with contents being the title of the notes aquired from storage.js
    itemList() {
        // Turns an array of names into an array of JSX Item ojects that contain the names
        return (storage.getList().map((value, index, array) => {
            // Nav.Link is a bootstrap object
            // eventKey needs to be unique. I set it to the name of the note
            // onClick is a function that calls another function that was passed down from Layout.js. This enables us to pass it the titleof the note that this menu item is about because the arrow syntax outer function is ddefined here and therefore has acess to this classe's varables which it can then pass to the function from Layout.js.
            return (
            <>
                    <AddNewButton callback={value => alert(value)}></AddNewButton>
                <hr />
                <Nav.Link
                    eventKey={value}
                    onClick={() => {this.props.onItemClick(value)}}
                >
                    {value}
                </Nav.Link>
            </>
            );
        }));
    }

    render() {
        return(
            <div id="list">
                <Nav className="flex-column" fill variant="pills">
                    {this.itemList()}
                </Nav>
            </div>
        );
    }
}

// Creates a button. When it is clicked it becomes a text box. When enter is pressed or onSubmit is otherwise triggered for the text box the callback prop is called with the value.
// Takes callback function as a prop in the form function(value)
class AddNewButton extends React.Component {
    // Add internal varables
    constructor(props) {
        super(props);
        this.state = {
            // Possible modes: textbox, textbox-disabled, button/anything else
            mode: "button",
        };

        // .bind(value) copies it's parent function and returns a copy of it with it's this keyward set to value
        // You need to do this because the function is called outside the context of this class because the function was passed
        // onEvent={function} needs this. onEvent{() => function()} does not because the function was called here. You can tell because function() instead of just function
        this.processEntry = this.processEntry.bind(this);
    }

    buttonClick() {
        this.setState({
            // Change mode to textbox and make sure that it's value is ""
            mode: "textbox",
            value: "", 
        });
    }

    // Called by onSubmit event
    processEntry(event) {
        // Don't do the standard GET request that usually happens when trigger onSubmit (by pressing Enter)
        event.preventDefault();
        // Makes react give me the full event object.
        // If I didn't do this event.target would be null. This is a menory saving feature.
        event.persist();
        
        // Disable the text box while the callback is doing it's thing
        this.setState({
            mode: "textbox-disabled",
        });
        this.props.callback(event.target.children[0].value)
        // Reset to the starting state
        this.setState({
            mode: "button",
        });
    }

    render() {
        if (this.state.mode === "textbox" || this.state.mode === "textbox-disabled") {
            return(
                <Nav.Item
                    // Make this a form html object with Nav.Item classes
                    as="form"
                    onSubmit={this.processEntry}
                >
                    <Form.Control
                        type="text"
                        placeholder="New note"
                        autoFocus
                        // If disabled disabled=true
                        disabled={(this.state.mode === "textbox-disabled")}
                    />
                </Nav.Item>
            );
        } else {
            return(
                <Nav.Link
                    // Under score for stuff not generated by a for loop or similar
                    eventKey="_new"
                    onClick={() => {this.buttonClick()}}
                >
                    Button
                </Nav.Link>
            );
        }
    }
}

export default Sidebar;